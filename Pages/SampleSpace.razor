@page "/SampleSpace"
@using static MyLibrary;
@using System.Drawing;
@using Microsoft.AspNetCore.Html;

<PageTitle>Index</PageTitle>
<!-- Greeting Message -->
@*<TopBanner BannerTxt = "SVG Geometric  Figures">This model will be used to show ZOOM</TopBanner>*@
<TopBanner BannerTxt="Sliding Page"></TopBanner>
<!-- HMTL -->
<div class="container-fluid  h90 m-0 p-0">
    <div class="row m-0 " style="background-color:azure;width:100%">
        <div class="col-4 m0" style="border:solid 1px red;border-color:cadetblue;">
            <h4>Circle</h4>
            <div>
                <div class="form-group m0">
                    <label style="font-size:12px;margin-bottom:0;margin-top:1px">Width</label>
                    <input type="range" min="0" max="255" step="1" style="width:100%"
                           value="@svgWidth" @oninput="@(args => SvgWidth( Convert.ToInt32(args.Value )))" />
                    <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@svgWidth />
                </div>

                <div class="form-group m0">
                    <label style="font-size:12px;margin-bottom:0;margin-top:1px">Height</label>
                    <input type="range" min="1" max="@InitialHeight" step="1" style="width:100%"
                           value="@svgHeight" @oninput="@(args => SvgHeight( Convert.ToInt32(args.Value )))" />
                    <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@svgHeight />
                </div>
            </div>
        </div>

        <div class="col-4 m0" style="border:solid 1px red;border-color:cadetblue">
            <h4>View Start (viewbox upper left corner position)</h4>
            <div class="form-group m0">
                <label style="font-size:12px;margin-bottom:0;margin-top:1px">Left (x)</label>
                <input type="range" min="@(-svgWidth)" max="@svgWidth" step="1" style="width:100%"
                       value="@viewX" @oninput="@(args => ViewX( Convert.ToInt32(args.Value )))" />
                <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@viewX />
            </div>

            <div class="form-group m0">
                <label style="font-size:12px;margin-bottom:0;margin-top:1px">Top (y)</label>
                <input type="range" min="@(-svgHeight)" max="@svgHeight" step="1" style="width:100%"
                       value="@viewY" @oninput="@(args => ViewY( Convert.ToInt32(args.Value )))" />
                <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@viewY />
            </div>
        </div>

        <div class="col-4 m0" style="border:solid 1px red;border-color:cadetblue">
            <h4>Scale (viewbox grow/shrink)</h4>
            <div class="form-group m0">
                @*                <label style="font-size:12px;margin-bottom:0;margin-top:1px">Width</label>
                <input type="range" min="1" max="@( 2 * svgWidth)" step="1" style="width:100%"
                value="@viewWidth" @oninput="@(args => ViewWidth( Convert.ToInt32(args.Value )))"/>
                <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@viewWidth/>
                <div class="form-group float-end">
                <span class="text-center"> Center View Box </span>
                <input type="checkbox" @onchange="@(eventArgs => CenterViewBoxClicked( Convert.ToBoolean(eventArgs.Value)))" />
                </div>*@
            </div>

            <div class="form-group m0">
                @*                <label style="font-size:12px;margin-bottom:0;margin-top:1px">Height</label>
                <input type="range" min="1" max="@( 2 * svgHeight)" step="1" style="width:100%"
                value="@viewHeight" @oninput="@((args) => ViewHeight( Convert.ToInt32(args.Value )))"/>
                <input type="number" step="10" style="background-color:azure;border:none" @bind-value=@viewHeight />
                <div class="form-group float-end">
                <span class="text-center"> Preservar a Proporção </span>
                <input type="checkbox" @onchange="@(eventArgs => KeepProportionClicked( Convert.ToBoolean(eventArgs.Value)))" />
                </div>    *@
            </div>
        </div>
    </div>

    <div class="container-fluid h80 m-0 p-0">
        <div class="wrapper" style="margin-top:10px; width:100%;height:100%;">
            <div class="row h80 m-0 p-0 " style=" width:100%;height:100%;">
                <div class="col-12 p-0 flexColCenter" style="border:solid 5px cadetblue;">
                    <!-- Set viewport and viewbox locations -->
                    <!-- Attention Bootstrap users: non percentual #width# values may mess up #Bootstrap# behavior -->
                    <svg x="0%" y="0%" width="@svgWidth" height="@svgHeight" @ref="SVGR"
                         style="border:solid 12px red;border-color:red"
                         preserveAspectRatio="@preservRatio">
                        <!-- 50 circles random colors, radius and locations-->
                        @for (int i = 0; i < 0; i++)
                        {
                            <circle cx="@arrCx[i]" cy="@arrCy[i]" r=@arrRx[i] stroke="black" stroke-width="3" fill="@arrCo[i]" />
                            //<polygon points="@arrTx1[i],@arrTy1[i] @arrTx2[i],@arrTy2[i] @arrTx3[i],@arrTy3[i]" style="fill:@arrCoT[i];stroke-width:1;stroke:black" />
                            //<polygon points="@arrSx1[i],@arrSy1[i] @arrSx2[i],@arrSy2[i] @arrSx3[i],@arrSy3[i] @arrSx4[i],@arrSy4[i]" style="fill:@arrCoS[i];stroke-width:1;stroke:black" />
                            <rect x=@arrQx1[i] y=@arrQy1[i] width=@arrQx2[i] height=@arrQx2[i] style="fill:@arrQoS[i];stroke-width:1;stroke:black;transform: rotate( @(arrQoR[i])deg )" />
                        }
                        if (@PlotTriangle)
                        {
                        <polygon points="@tCoord" style="fill:@Estilo;stroke-width:2;stroke:rgb(0,255,0)" />
                        }
                        <!-- Two rectangles to spot the viewbox location-->
                        <rect x=0 y=0 width="10" height="10" style="fill:rgb(0,25,255);stroke-width:0;stroke:rgb(0,255,0)" />
                        <rect x="@(svgWidth - 10)" y="@(svgHeight -10)" width="10" height="10" style="fill:rgb(0,25,255);stroke-width:0;stroke:rgb(0,255,0)" />
                    </svg>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Style -->
<style>
    .h20 {
        height: 20%;
        background-color: azure;
        color: black;
    }

    .h80 {
        height: 80%;
        background-color: azure;
        color: black;
    }

    .h90 {
        height: 90%;
        background-color: azure;
        color: black;
    }

    .h100 {
        height: 100%;
        background-color: azure;
        color: black;
    }

    .BordaRelevo {
        border-left-width: 3px;
        border-right-width: 3px;
    }

    .CardStyle {
        background-color: gainsboro;
        border: solid 1px;
        border-radius: 12px;
    }
</style>
<!-- C# Code -->
@code
{
    private ElementReference SVGR;

    private MyLibrary.RightTriangle? tri;
    private bool PlotTriangle = true;
    private string tCoord = "";
    private string Estilo = "";
    Tuple<PointF, PointF, PointF> t;

    private readonly int InitialWidth = 1800, InitialHeight = 800;
    //  Set svg ViewPort arbitrary initial values (pixels)
    private int svgWidth, svgHeight;

    //  Initial values in % ( for those who use Bootstrap)
    private string svgWidthPct = "100%", svgHeightPct = "100%";  // SvgHeightPct (%) nao está sendo usado pq o bootstrap bagunça tudo

    //  Set viewbox initial values
    private int viewX = 0, viewY = 0, viewWidth = 0, viewHeight = 0;

    //  Set flags to determine user action behavior
    private string preservRatio = "none";
    private bool centerViewBox = false;

    #region MyArrays
    //  Geometric figures (circles) values and Attributes
    int[] arrCx = new int[50];
    int[] arrCy = new int[50];
    int[] arrRx = new int[50];
    string[] arrCo = new string[50];

    //  Triangle
    float[] arrTx1 = new float[50];
    float[] arrTy1 = new float[50];

    float[] arrTx2 = new float[50];
    float[] arrTy2 = new float[50];

    float[] arrTx3 = new float[50];
    float[] arrTy3 = new float[50];

    string[] arrCoT = new string[50];

    //  Square
    int[] arrSx1 = new int[50];
    int[] arrSy1 = new int[50];

    int[] arrSx2 = new int[50];
    int[] arrSy2 = new int[50];

    int[] arrSx3 = new int[50];
    int[] arrSy3 = new int[50];

    int[] arrSx4 = new int[50];
    int[] arrSy4 = new int[50];

    string[] arrCoS = new string[50];

    //  Quad
    int[] arrQx1 = new int[50];
    int[] arrQy1 = new int[50];

    int[] arrQx2 = new int[50];
    int[] arrQy2 = new int[50];

    int[] arrQx3 = new int[50];
    int[] arrQy3 = new int[50];

    int[] arrQx4 = new int[50];
    int[] arrQy4 = new int[50];

    int[] arrQoR = new int[50];

    string[] arrQoS = new string[50];
    #endregion
    Random rnd = new Random();

    private string GetRandomColor()
    {
        string s = string.Format("#{0:X6}", rnd.Next(0x000000, 0xfefefe));
        return s;
    }

    protected override void OnInitialized()
    {
        //var g = (Rectangle)SVGR;

        //foreach( var p in SVGR.GetType().GetProperties())
        //{

        //    g = p.Attributes.ToString();
        //}

        tri = new(120, 160);
        t = tri.TriangleCoordinates(200, 200);

        tCoord = $"{t.Item1.X},{t.Item1.Y} {t.Item2.X},{t.Item2.Y} {t.Item3.X},{t.Item3.Y}";
        Estilo = $"\"fill:{GetRandomColor()};stroke-width:1;stroke:{GetRandomColor()};\"";
        Estilo = GetRandomColor();

        svgWidth = InitialWidth;
        svgHeight = InitialHeight;

        //  I suggest to set initial viewbox location equal to view port
        viewWidth = svgWidth;
        viewHeight = svgHeight;

        //rndNextCircle();
        //rndNextSquare();
        rndNextTriangle();
        //rndNextQuad();
        base.OnInitialized();
    }

    private void SvgWidth(int value)
    {
        //svgWidth = value;
        //svgWidthPct = String.Format("{0:N0}%", (int)((svgWidth * 100.0) / InitialWidth) );    // Este valor (%) esta sendo usado para que o bootstrap funcione
    }

    private void SvgHeight(int value)
    {
        //svgHeight = value;
        //svgHeightPct = String.Format("{0:N0}%", (int)((svgHeight * 100.0)/ InitialHeight) );  // Este valor (%) esta sendo calculado mas não estou usando pq o bootstrap bagunça tudo
    }

    private void ViewX(int value) => viewX = value;

    private void ViewY(int value) => viewY = value;

    private void ViewWidth(int value)
    {
        if (centerViewBox)
        {
            viewX = (svgWidth - value) / 2;
            viewWidth = value;
        }
        else
            viewWidth = Convert.ToInt32(value);
    }

    private void ViewHeight(int value)
    {
        if (centerViewBox)
        {
            viewY = (svgHeight - value) / 2;
            viewHeight = value;
        }
        else
            viewHeight = value;
    }

    private void KeepProportionClicked(bool value) => preservRatio = (value ? "" : "none");

    private void CenterViewBoxClicked(bool value) => centerViewBox = value;

    private void rndNextCircle()
    {   //  Color circles generator
        Random rnd = new Random();

        for (int i = 0; i < 0; i++)
        {
            arrCx[i] = svgWidth / 2;                    // rnd.Next( 0, svgWidth);
            arrCy[i] = svgHeight / 2;                    //rnd.Next( 0, svgHeight);
            arrRx[i] = rnd.Next(10, 128);
            arrCo[i] = String.Format("#{0:X6}", rnd.Next(0x000000, 0xfefefe));
        }
    }

    private void rndNextTriangle()
    {
        Random rnd = new Random();
        for (int i = 0; i < 1; i++)
        {
            arrTx1[i] = t.Item1.X; //svgWidth  / 2;  //rnd.Next(0, svgWidth);
            arrTy1[i] = t.Item1.Y; //svgHeight / 2; //rnd.Next(0, svgHeight);

            arrTx2[i] = t.Item2.X + 20; //400 + svgWidth / 2; rnd.Next(arrTx1[i] - 200, arrTx1[i] + 200);
            arrTy2[i] = t.Item3.Y + 20; //0 + svgHeight / 2; rnd.Next(arrTy1[i] - 200, arrTy1[i] + 200);

            arrTx3[i] = t.Item3.X + 300; //+400 + svgWidth / 2;  //rnd.Next(arrTx2[i] - 100, arrTx2[i] + 100);
            arrTy3[i] = t.Item3.Y + 300; //-300 + svgHeight / 2; //rnd.Next(arrTy2[i] - 100, arrTy2[i] + 100);

            arrCoT[i] = String.Format("#{0:X6}", rnd.Next(0x000000, 0xfefefe));
        }
    }

    private void rndNextSquare()
    {
        Random rnd = new Random();
        for (int i = 0; i < 50; i++)
        {
            arrSx1[i] = rnd.Next(0, svgWidth);
            arrSy1[i] = rnd.Next(0, svgHeight);

            arrSx2[i] = rnd.Next(arrSx1[i] - 100, arrSx1[i] + 100);
            arrSy2[i] = rnd.Next(arrSy1[i] - 100, arrSy1[i] + 100);

            arrSx3[i] = rnd.Next(arrSx2[i] - 100, arrSx2[i] + 100);
            arrSy3[i] = rnd.Next(arrSy2[i] - 100, arrSy2[i] + 100);

            arrSx4[i] = rnd.Next(arrSx3[i] - 100, arrSx3[i] + 100);
            arrSy4[i] = rnd.Next(arrSy3[i] - 100, arrSy3[i] + 100);

            arrCoS[i] = String.Format("#{0:X6}", rnd.Next(0x000000, 0xfefefe));
        }
    }
    private void rndNextQuad()
    {
        Random rnd = new Random();
        for (int i = 0; i < 0; i++)
        {
            arrQx1[i] = rnd.Next(0, svgWidth);
            arrQy1[i] = rnd.Next(0, svgHeight);

            arrQx2[i] = rnd.Next(10, 128);
            arrQy2[i] = rnd.Next(arrQy1[i] - 100, arrQy1[i] + 100);

            arrQx3[i] = rnd.Next(arrQx2[i] - 100, arrQx2[i] + 100);
            arrQy3[i] = rnd.Next(arrQy2[i] - 100, arrQy2[i] + 100);

            arrQx4[i] = rnd.Next(arrQx3[i] - 100, arrQx3[i] + 100);
            arrQy4[i] = rnd.Next(arrQy3[i] - 100, arrQy3[i] + 100);

            arrQoR[i] = rnd.Next(0, 89);
            arrQoS[i] = String.Format("#{0:X6}", rnd.Next(0x000000, 0xfefefe));
        }
    }
}